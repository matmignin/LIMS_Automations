#include C:\Windows\ShellNew\TemplateIncludeFile.ahk
#SingleInstance force

/*
; ATTENTION! THIS COMMENT BLOCK IS IN INI FORMAT AND COULD BE USED AS INI FILE.
[META]
Source=				http://www.autohotkey.com/forum/viewtopic.php?t=36601
Language=              en
Description=           If you want to create lots of variable from .ini files, this function is for you. It reads the whole file in one go and creates all the global variables.
Date=                  2009-09-07
Author=                Scratch
Category=              File Management
Type=                  Library
*/

#NoEnv
SendMode Input
SetWorkingDir %A_ScriptDir%

; .....................................................
;                    TEST SECTION
; .....................................................

; Create the ini file (scriptname.ini)
iniFile := "C:\Users\mmignin\Documents\VQuest\Settings2.ini" ;SubStr( A_ScriptName, 1, -3 ) . "ini"
iniContent =
(
[Options]
DebuggingScript=
ShowSampleID=1
HideVarbar=1
A_Mode=
ExcelConnect=1
Mode=Entering_Rotations
showVarbar=1
ModeSelections=

[Locations]
VarBar_x=1870
VarBar_y=-581
ProductTable_X=745+50
ProductTable_Y=75+50
SpecTable_X=745+50
SpecTable_Y=75+50
RotationTable_X=0
RotationTable_Y=0
xDivider=375
yDivider=134
Notes_x=2345
Notes_y=1325


[SavedVariables]
Iteration=1
Products=K222
Lot=222-2222
Coated=
SampleID=
Batch=
CurrentCodes=
Note3=
WindowMousePosition=1350, 515
PixelColor=0x37342F
Product=E175
CodeString=I350 105-0876 0741F1


)
replaceFile(iniFile, iniContent) ; delete previous ini file and replace it with the new one

;--------------------------------------------
ini(test) ; Read the ini file and store its content to variables
;--------------------------------------------

msgbox posx := %posx% , posy := %posy% , posz := %posz%
;
; Now we change the variables and write/update the ini
;
posx := posx * 2
posy := posy * 2
posz := posz * 2

;--------------------------------------------
ini(test, 1) ; write/update the ini file
;--------------------------------------------

Msgbox Updated variables written...
;
; To confirm the INI is correctly updated, we read out the INI again
;
ini(test)
msgbox UPDATED >>> posx := %posx% , posy := %posy% , posz := %posz%


RETURN ; END OF Auto-execution section


replaceFile(File, Content)
{
	FileDelete, %File%
	FileAppend, %Content%, %File%
}
Return

; .....................................................
;               END OF TEST SECTION
; .....................................................


ini( filename = 0, updatemode = 0 )
;
; updates From/To a whole .ini file
;
; By default the update mode is set to 0 (Read)
; and creates variables like this:
; %Section%%Key% = %value%
;
; You don't have to state the updatemode when reading, just use
;
; update(filename)
;
; The function can be called to write back updated variables to
; the .ini by setting the updatemode to 1, like this:
;
; update(filename, 1)
;
{
Local s, c, p, key, k, write

   if not filename
      filename := SubStr( A_ScriptName, 1, -3 ) . "ini"

   FileRead, s, %filename%

   Loop, Parse, s, `n`r, %A_Space%%A_Tab%
   {
      c := SubStr(A_LoopField, 1, 1)
      if (c="[")
         key := SubStr(A_LoopField, 2, -1)
      else if (c=";")
         continue
      else {
         p := InStr(A_LoopField, "=")
         if p {
         k := SubStr(A_LoopField, 1, p-1)
       if updatemode=0
          %key%%k% := SubStr(A_LoopField, p+1)
       if updatemode=1
       {
          write := %key%%k%
          IniWrite, %write%, %filename%, %key%, %k%
       }
         }
      }
   }
}
